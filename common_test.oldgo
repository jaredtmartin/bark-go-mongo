package bark_test

import (
	"context"
	"testing"

	"github.com/jaredtmartin/bark-go-mongo"
	"go.mongodb.org/mongo-driver/v2/bson"
)

func TestCommonFind(t *testing.T) {
	ctx := context.WithValue(context.Background(), bark.DbNameKey, "test-1")
	t.Setenv("MONGO_URI", "mongodb://localhost:27017")
	t.Setenv("MONGO_DB", "test")
	t.Setenv("ENV", "test")

	// Create a new collection
	dogs, err := bark.NewCollection[sampleModel](sampleModelCollectionName, ctx)
	if err != nil {
		t.Fatalf("Failed to create collection: %v", err)
	}

	// Clear the collection to ensure a clean slate
	err = dogs.Clear(ctx)
	if err != nil {
		t.Fatalf("Failed to clear collection: %v", err)
	}

	// Add multiple documents to the collection
	model1 := dogs.New()
	model1.Name = "Model 1"
	err = model1.Save(ctx)
	if err != nil {
		t.Fatalf("Failed to save model1: %v", err)
	}

	model2 := dogs.New()
	model2.Name = "Model 2"
	err = model2.Save(ctx)
	if err != nil {
		t.Fatalf("Failed to save model2: %v", err)
	}
	collection := dogs.Collection()
	// Use Find to retrieve all documents
	var results []sampleModel
	filter := bson.M{}

	err = bark.Find(collection, filter, &results, nil, ctx)
	if err != nil {
		t.Fatalf("Failed to find documents: %v", err)
	}

	// Verify the retrieved documents
	if len(results) != 2 {
		t.Fatalf("Expected 2 documents, got %d", len(results))
	}

	names := []string{results[0].Name, results[1].Name}
	if !(names[0] == "Model 1" && names[1] == "Model 2") && !(names[0] == "Model 2" && names[1] == "Model 1") {
		t.Errorf("Expected documents with names 'Model 1' and 'Model 2', got %v", names)
	}

	// Use Find with a filter to retrieve a specific document
	filter = bson.M{"Name": "Model 1"}
	results = []sampleModel{}
	err = bark.Find(collection, filter, &results, nil, ctx)
	if err != nil {
		t.Fatalf("Failed to find documents with filter: %v", err)
	}

	if len(results) != 1 {
		t.Fatalf("Expected 1 document, got %d", len(results))
	}
	if results[0].Name != "Model 1" {
		t.Errorf("Expected document with Name 'Model 1', got %s", results[0].Name)
	}
}
func TestCommonCount(t *testing.T) {
	ctx := context.WithValue(context.Background(), bark.DbNameKey, "test-1")
	t.Setenv("MONGO_URI", "mongodb://localhost:27017")
	t.Setenv("MONGO_DB", "test")
	t.Setenv("ENV", "test")

	// Create a new collection
	dogs, err := bark.NewCollection[sampleModel](sampleModelCollectionName, ctx)
	if err != nil {
		t.Fatalf("Failed to create collection: %v", err)
	}

	// Clear the collection to ensure a clean slate
	err = dogs.Clear(ctx)
	if err != nil {
		t.Fatalf("Failed to clear collection: %v", err)
	}

	// Add multiple documents to the collection
	model1 := dogs.New()
	model1.Name = "Model 1"
	err = model1.Save(ctx)
	if err != nil {
		t.Fatalf("Failed to save model1: %v", err)
	}

	model2 := dogs.New()
	model2.Name = "Model 2"
	err = model2.Save(ctx)
	if err != nil {
		t.Fatalf("Failed to save model2: %v", err)
	}
	collection := dogs.Collection()
	// Count all documents in the collection
	filter := bson.M{}
	count, err := bark.Count(collection, filter, ctx)
	if err != nil {
		t.Fatalf("Failed to count documents: %v", err)
	}
	if count != 2 {
		t.Errorf("Expected count to be 2, got %d", count)
	}

	// Count documents with a specific filter
	filter = bson.M{"Name": "Model 1"}
	count, err = bark.Count(collection, filter, ctx)
	if err != nil {
		t.Fatalf("Failed to count documents with filter: %v", err)
	}
	if count != 1 {
		t.Errorf("Expected count to be 1, got %d", count)
	}

	// Count documents with a filter that matches no documents
	filter = bson.M{"Name": "Nonexistent Model"}
	count, err = bark.Count(collection, filter, ctx)
	if err != nil {
		t.Fatalf("Failed to count documents with non-matching filter: %v", err)
	}
	if count != 0 {
		t.Errorf("Expected count to be 0, got %d", count)
	}
}
func TestCommonFindAndCount(t *testing.T) {
	ctx := context.WithValue(context.Background(), bark.DbNameKey, "test-1")
	t.Setenv("MONGO_URI", "mongodb://localhost:27017")
	t.Setenv("MONGO_DB", "test")
	t.Setenv("ENV", "test")

	// Create a new collection
	dogs, err := bark.NewCollection[sampleModel](sampleModelCollectionName, ctx)
	if err != nil {
		t.Fatalf("Failed to create collection: %v", err)
	}

	// Clear the collection to ensure a clean slate
	err = dogs.Clear(ctx)
	if err != nil {
		t.Fatalf("Failed to clear collection: %v", err)
	}

	// Add multiple documents to the collection
	model1 := dogs.New()
	model1.Name = "Model 1"
	err = model1.Save(ctx)
	if err != nil {
		t.Fatalf("Failed to save model1: %v", err)
	}

	model2 := dogs.New()
	model2.Name = "Model 2"
	err = model2.Save(ctx)
	if err != nil {
		t.Fatalf("Failed to save model2: %v", err)
	}
	collection := dogs.Collection()
	// Use FindAndCount to retrieve all documents and count them
	var results []sampleModel
	filter := bson.M{}
	count, err := bark.FindAndCount(collection, filter, &results, nil, ctx)
	if err != nil {
		t.Fatalf("Failed to find and count documents: %v", err)
	}

	// Verify the count and retrieved documents
	if count != 2 {
		t.Errorf("Expected count to be 2, got %d", count)
	}
	if len(results) != 2 {
		t.Fatalf("Expected 2 documents, got %d", len(results))
	}

	names := []string{results[0].Name, results[1].Name}
	if !(names[0] == "Model 1" && names[1] == "Model 2") && !(names[0] == "Model 2" && names[1] == "Model 1") {
		t.Errorf("Expected documents with names 'Model 1' and 'Model 2', got %v", names)
	}

	// Use FindAndCount with a filter to retrieve a specific document and count
	filter = bson.M{"Name": "Model 1"}
	results = []sampleModel{}
	count, err = bark.FindAndCount(collection, filter, &results, nil, ctx)
	if err != nil {
		t.Fatalf("Failed to find and count documents with filter: %v", err)
	}

	if count != 1 {
		t.Errorf("Expected count to be 1, got %d", count)
	}
	if len(results) != 1 {
		t.Fatalf("Expected 1 document, got %d", len(results))
	}
	if results[0].Name != "Model 1" {
		t.Errorf("Expected document with Name 'Model 1', got %s", results[0].Name)
	}

	// Use FindAndCount with a filter that matches no documents
	filter = bson.M{"Name": "Nonexistent Model"}
	results = []sampleModel{}
	count, err = bark.FindAndCount(collection, filter, &results, nil, ctx)
	if err != nil {
		t.Fatalf("Failed to find and count documents with non-matching filter: %v", err)
	}

	if count != 0 {
		t.Errorf("Expected count to be 0, got %d", count)
	}
	if len(results) != 0 {
		t.Fatalf("Expected 0 documents, got %d", len(results))
	}
}
func TestCommonAll(t *testing.T) {
	ctx := context.WithValue(context.Background(), bark.DbNameKey, "test-1")
	t.Setenv("MONGO_URI", "mongodb://localhost:27017")
	t.Setenv("MONGO_DB", "test")
	t.Setenv("ENV", "test")

	// Create a new collection
	dogs, err := bark.NewCollection[sampleModel](sampleModelCollectionName, ctx)
	if err != nil {
		t.Fatalf("Failed to create collection: %v", err)
	}

	// Clear the collection to ensure a clean slate
	err = dogs.Clear(ctx)
	if err != nil {
		t.Fatalf("Failed to clear collection: %v", err)
	}

	// Add multiple documents to the collection
	model1 := dogs.New()
	model1.Name = "Model 1"
	err = model1.Save(ctx)
	if err != nil {
		t.Fatalf("Failed to save model1: %v", err)
	}

	model2 := dogs.New()
	model2.Name = "Model 2"
	err = model2.Save(ctx)
	if err != nil {
		t.Fatalf("Failed to save model2: %v", err)
	}
	collection := dogs.Collection()
	// Use All to retrieve all documents
	var results []sampleModel
	err = bark.All(collection, &results, nil, ctx)
	if err != nil {
		t.Fatalf("Failed to retrieve all documents: %v", err)
	}

	// Verify the retrieved documents
	if len(results) != 2 {
		t.Fatalf("Expected 2 documents, got %d", len(results))
	}

	names := []string{results[0].Name, results[1].Name}
	if !(names[0] == "Model 1" && names[1] == "Model 2") && !(names[0] == "Model 2" && names[1] == "Model 1") {
		t.Errorf("Expected documents with names 'Model 1' and 'Model 2', got %v", names)
	}
}
